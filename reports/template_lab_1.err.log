Traceback (most recent call last):
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/josefine/miniconda3/envs/cb2070-test/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# molecular orbitals
mol_orbs = scf_results["C_alpha"]

# number of occupied MOs (in restricted HF)
nocc = ...

# define the coordinates (in Bohr) for which you wish values of orbitals
n = 200
r = ... # use np.linspace to create values between 0 and 4 with n data points

# define array for coordinates
coords = np.zeros((n, 3))

# set the values of the z axis to r
coords[...] = 

# get the indices of the occupied orbitals
mo_idx = range(...)

# create the mos one by one or setup a loop through mo_number
mo_1 = np.array(vis_drv.get_mo(coords, molecule, basis, mol_orbs, mo_idx[0]))
...
------------------


  [36mCell[39m[36m [39m[32mIn[8][39m[32m, line 15[39m
[31m    [39m[31mcoords[...] =[39m
                  ^
[31mSyntaxError[39m[31m:[39m invalid syntax


